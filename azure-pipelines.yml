trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
    - images/

name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Provision IaC
  jobs:
  - job: Build
    pool:
      name: syed
    steps:
     - task: InstallSSHKey@0
       inputs:
         knownHostsEntry: '5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl'
         sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDEM6HCI0GQWF4WwXACfyj/qsaXHMFzcTpbAltU5htD+vpXcNGA0YB0ZxABsAx46mTJgYs665BlSRdQfS+j1xjsuI5LPdR6wURu49ysibwmwnscVIkesrj2jNvi9KYzAic76aKs6hM8+pXE2BfNjB3j1UPepQn48EP5g+ifXuyXH1T7bV5hi1B/tTyWa9r3MdvNs31IhPdry3lozQM1BE9e9MS1bsa1y+yYKaI0X/Xy8d2W0LdzdQDGxqtNI5HGKJjnAt9fAkKPDfl3CkpMMp3ySxbqG2DonD7sBQK6AGO0V4GZF234JjZDnMO0ejnlLHXhCIJGozWsvXudXOkgbCYVT+lQWTnKjnyBF5lpH0LQZnP9p27FWEp85RoVmI4bPyRIh29dd7Sxjg3qv1oBIRUwn8K56YFUxI65FMVfvrztu6Ik+b7CJ2lHI78XlNkwKeDAW8udf5OZm4Q37SKnXrtdctlc+h7q4DIxqj1zS0zVBLUwdIH7f9MasYQ4TgBM/uU= AzureAD+SyedShah@DESKTOP-OPB779E'
         sshKeySecureFile: 'id_rsa'
    # Needed for Terraform VM deployment
     - task: TerraformInstaller@0
       displayName: 'Install Terraform'
       inputs:
         terraformVersion: 'latest'
     - task: TerraformTaskV3@3
       displayName: 'Terraform Init'
       inputs:
         provider: 'azurerm'
         command: 'init'
         workingDirectory: '$(System.DefaultWorkingDirectory)\terraform'
         backendServiceArm: 'Azure for Students(78edc3c6-6f4c-46b2-8fed-9503d6b80433)'
         backendAzureRmResourceGroupName: 'tfstate'
         backendAzureRmStorageAccountName: 'tfstate464486048'
         backendAzureRmContainerName: 'tfstate'
         backendAzureRmKey: 'terraform.tfstate'
     - task: TerraformTaskV3@3
       displayName: 'Terraform Validate'
       inputs:
         provider: 'azurerm'
         command: 'validate'
         workingDirectory: '$(System.DefaultWorkingDirectory)\terraform'

     - task: TerraformTaskV3@3
       displayName: 'Terraform Plan'
       inputs:
         provider: 'azurerm'
         command: 'plan'
         workingDirectory: '$(System.DefaultWorkingDirectory)\terraform'
         environmentServiceNameAzureRM: 'Azure for Students(78edc3c6-6f4c-46b2-8fed-9503d6b80433)'
     
     - task: TerraformTaskV3@3
       displayName: 'Terraform Apply'
       inputs:
         provider: 'azurerm'
         command: 'apply'
         workingDirectory: '$(System.DefaultWorkingDirectory)\terraform'
         commandOptions: '-auto-approve'
         environmentServiceNameAzureRM: 'Azure for Students(78edc3c6-6f4c-46b2-8fed-9503d6b80433)'
     - task: ArchiveFiles@2
       displayName: 'Archive FakeRestAPI'
       inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    
     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
       displayName: 'Upload Package'
       artifact: drop-fakerestapi
    
     - task: ArchiveFiles@2
       displayName: "Archive Selenium UI Tests"
       inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: '$(Build.BuildId)/selenium-tests.zip'
              replaceExistingArchive: true
     - upload: $(Build.BuildId)/selenium-tests.zip
       artifact: selenium

- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      name: Linux VM
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure for Students(78edc3c6-6f4c-46b2-8fed-9503d6b80433)'
              appType: 'webApp'
              appName: 'dev-westeurope-001-AppService'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
  - deployment: VMDeploy
    displayName: Deploy Virtual Machine
    environment:
        name: 'TEST'
        resourceType: VirtualMachine
    strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    sudo apt-get update -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo apt-get install -y chromium-browser
                    sudo apt-get install -y chromium-chromedriver
                    python3 -m pip install --upgrade pip
                    pip3 install selenium
                     #Install Log Analytics agent on Linux computers (only need to run once, comment when installed)
                     #wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY} -d opinsights.azure.com
                  env: 
                    AZURE_LOG_ANALYTICS_ID: $(la_workspace_id)
                    AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(la_primary_key)
                  displayName: Configure VM
- stage: Test
  jobs:
    - job: IntegrationTests
      displayName: Integration Tests For UI and Selenium
      pool:
       name: 'Linux VM'
      steps:
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: 'sudo npm install -g newman'
          #script: 'pip install newman'
          workingDirectory: $(System.DefaultWorkingDirectory)
      - task: CmdLine@2
        displayName: Apply Regression Tests
        continueOnError: true
        inputs:
          script: 'newman run ./postman/regression.json --reporters cli,junit --reporter-junit-export ./postman/TEST-regression.xml'
          workingDirectory:  $(System.DefaultWorkingdirectory)
      - task: CmdLine@2
        displayName: Apply Validation Tests
        continueOnError: true
        inputs:
          script: 'newman run ./postman/validation.json --reporters cli,junit --reporter-junit-export ./postman/TEST-validation.xml'
          workingDirectory: $(System.DefaultWorkingdirectory)
      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testResultsFiles: '**/TEST-*.xml' 
          searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/' 
          publishRunAttachments: true
    
    - job: UITests
      displayName: Selenuim UI Tests
      pool:
       name: 'Linux VM'
      steps:
      - task: Bash@3
        displayName: 'Setup VM environment'
        inputs:
          targetType: 'inline'
          script: |
            #! /bin/bash
            sudo apt-get upgrade -y
            sudo apt-get install python3-pip -y
            sudo apt-get install unzip -y
#      - task: Bash@3
#        displayName: 'Configure Selenium, Chromium & chromedriver'
#        inputs:
#          targetType: 'inline'
#          script: |
#            #install chromium & selenium
#            sudo apt-get install -y chromium-browser
#            pip3 install selenium
#            
#            #install chromedriver & export path
#            if [ ! -f $(Pipeline.Workspace)/chromedriver ]; then
#              wget https://chromedriver.storage.googleapis.com/100.0.4896.20/chromedriver_linux64.zip
#              unzip chromedriver_linux64.zip
#            fi
#            export PATH=$PATH:$(Pipeline.Workspace)/chromedriver      

      - task: Bash@3
        displayName: 'Run UI test'
        inputs:
          targetType: 'inline'
          script: |
            if [ ! -d /var/log/selenium ]; then
                  sudo mkdir /var/log/selenium
                  sudo chmod 777 /var/log/selenium
            fi            
            python3 ./automatedtesting/selenium/login.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
            cd $(System.DefaultWorkingDirectory)
            mkdir -p log/selenium              
            sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
            ls -al
      - task: PublishPipelineArtifact@1
        displayName: Publish selenium logs
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
          artifact: 'drop-selenium-logs'
          publishLocation: 'pipeline'
   
    - job: PerformanceTest
      displayName: Test JMeter
      pool:
        name: Linux VM
      steps:
          - bash: |
              sudo apt-get install openjdk-11-jre-headless -y
              java -version
              wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz -O jmeter.tgz
              tar xzvf jmeter.tgz
              mkdir -p log/jmeter
              # if [ ! -d /var/log/jmeter ]; then
              #         sudo mkdir /var/log/jmeter
              #         sudo chmod 777 /var/log/jmeter
              # fi
              # if [ ! -d /var/log/jmeter/stress-test-html-report ]; then
              #         sudo mkdir /var/log/jmeter/stress-test-html-report
              #         sudo chmod 777 /var/log//stress-test-html-report
              # fi  
              # if [ ! -d /var/log/jmeter/endurance-test-html-report ]; then
              #         sudo mkdir /var/log/jmeter/endurance-test-html-report
              #         sudo chmod 777 /var/log/jmeter/endurance-test-html-report
              # fi  
            displayName: Install JMeter
          - bash: |
              apache-jmeter-5.5/bin/jmeter -n -t /jmeter/stress.jmx \
                                          -l log/jmeter/stress-test-result.csv \
                                          -e -f -o log/jmeter \
                                          -j log/jmeter/jmeter-stress-test.log
            displayName: JMeter Stress Test
          - bash: |
              apache-jmeter-5.5/bin/jmeter -n -t /jmeter/endurance.jmx \
                                          -l log/jmeter/endurance-test-result.csv \
                                          -e -f -o log/jmeter \
                                          -j log/jmeter/jmeter-endurance-test.log
            displayName: JMeter Endurance Test
          - task: ArchiveFiles@2
            displayName: Saving JMeter stress test report to artifact
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter-$(Build.BuildId).zip'
              verbose: true
          - task: ArchiveFiles@2
            displayName: Saving JMeter endurance test report to artifact
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter-$(Build.BuildId).zip'
              verbose: true
          - task: PublishPipelineArtifact@1
            displayName: Publish JMeter logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
              artifactName: 'drop-jmeter-logs'